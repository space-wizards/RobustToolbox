using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Robust.Shared.Utility;

internal static class SerializationTypeHelpers
{
    internal static IEnumerable<AbstractFieldInfo> GetAllPropertiesAndFields(this Type type)
    {
        foreach (var field in type.GetAllFields())
        {
            yield return new SpecificFieldInfo(field);
        }

        foreach (var property in type.GetAllProperties())
        {
            yield return new SpecificPropertyInfo(property);
        }
    }

    internal static SpecificFieldInfo? GetBackingField(this Type type, string propertyName)
    {
        foreach (var parent in type.GetClassHierarchy())
        {
            var field = parent.GetField($"<{propertyName}>k__BackingField",
                BindingFlags.NonPublic | BindingFlags.Instance);

            if (field != null)
            {
                return new SpecificFieldInfo(field);
            }
        }

        return null;
    }

    public static bool HasBackingField(this Type type, string propertyName)
    {
        return type.GetBackingField(propertyName) != null;
    }

    internal static bool TryGetBackingField(this Type type, string propertyName,
        [NotNullWhen(true)] out SpecificFieldInfo? field)
    {
        return (field = type.GetBackingField(propertyName)) != null;
    }

    public static bool IsBackingField(this MemberInfo memberInfo)
    {
        return memberInfo.HasCustomAttribute<CompilerGeneratedAttribute>() &&
               memberInfo.Name.StartsWith("<") &&
               memberInfo.Name.EndsWith(">k__BackingField");
    }

    internal static bool IsAutogeneratedRecordMember(this AbstractFieldInfo info)
    {
        if (info.DeclaringType == null)
            return false;

        if (info.Name == "EqualityContract" && info.FieldType == typeof(Type))
            return true;

        return false;
    }
}
